# Pre-commit hooks configuration for FundCast
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # ============================================================================
  # GENERAL CODE QUALITY
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting and safety
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=10240']  # 10MB limit
      
      # Security and sensitive data
      - id: check-private-key
      - id: detect-aws-credentials
      - id: detect-private-key
      
      # Code structure
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-merge-conflict
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]

  # ============================================================================
  # PYTHON CODE FORMATTING & LINTING
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]
        
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--line-length", "88"]

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      # Linter
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      # Formatter (alternative to black)
      - id: ruff-format

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-bandit

  # ============================================================================
  # PYTHON SECURITY & TYPE CHECKING
  # ============================================================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -ll, -x, tests/]
        
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-redis]
        args: [--ignore-missing-imports, --strict-optional]

  # ============================================================================
  # PYTHON CODE OPTIMIZATION
  # ============================================================================
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --in-place

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]

  # ============================================================================
  # DOCKERFILE & DOCKER COMPOSE
  # ============================================================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # ============================================================================
  # JAVASCRIPT/TYPESCRIPT (if present)
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.0.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        additional_dependencies:
          - eslint@8.57.0
          - '@typescript-eslint/parser@6.21.0'
          - '@typescript-eslint/eslint-plugin@6.21.0'

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|yaml|yml|md)$
        exclude: ^(package-lock\.json|.*\.min\.(js|css))$

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: ^(.*\.lock|.*\.min\.(js|css)|package-lock\.json)$

  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # ============================================================================
  # COMMIT MESSAGE FORMATTING
  # ============================================================================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # ============================================================================
  # DOCUMENTATION
  # ============================================================================
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        
  - repo: https://github.com/myint/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        args: [--in-place, --wrap-summaries=88, --wrap-descriptions=88]

  # ============================================================================
  # YAML/JSON FORMATTING
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: prettier-yaml-json
        files: \.(yaml|yml|json)$
        exclude: ^(package-lock\.json)$

  # ============================================================================
  # SHELL SCRIPTS
  # ============================================================================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.7.0-4
    hooks:
      - id: shfmt
        args: [-w, -s, -i, '2']

  # ============================================================================
  # CUSTOM LOCAL HOOKS
  # ============================================================================
  - repo: local
    hooks:
      # Custom Python import sorting check
      - id: check-python-imports
        name: Check Python import organization
        entry: python -c "import ast, sys; [print(f'✅ {f}') for f in sys.argv[1:] if ast.parse(open(f).read())]"
        language: system
        files: \.py$
        
      # Environment file validation
      - id: validate-env-files
        name: Validate environment files
        entry: bash -c 'for f in "$@"; do echo "Validating $f"; grep -E "^[A-Z_]+=" "$f" >/dev/null && echo "✅ $f" || echo "❌ $f"; done' --
        language: system
        files: \.env.*$
        
      # Check for debugging prints
      - id: check-debug-prints
        name: Check for debugging print statements
        entry: bash -c 'if grep -r "print(" src/ tests/ --include="*.py"; then echo "❌ Debug print statements found"; exit 1; else echo "✅ No debug prints"; fi'
        language: system
        pass_filenames: false
        
      # Validate requirements files
      - id: validate-requirements
        name: Validate Python requirements
        entry: bash -c 'for f in requirements*.txt; do [[ -f "$f" ]] && pip-compile --dry-run "$f" && echo "✅ $f" || echo "❌ $f"; done'
        language: system
        files: requirements.*\.txt$
        pass_filenames: false

# ============================================================================
# CONFIGURATION
# ============================================================================
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [hadolint-docker, ggshield]  # Skip hooks that need external dependencies
  submodules: false

# Hook execution order and dependencies
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0