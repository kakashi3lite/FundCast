[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fundcast"
dynamic = ["version"]
description = "AI-first social funding + forecasting platform for SaaS founders"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "FundCast Team"},
]
keywords = ["fintech", "crowdfunding", "prediction-markets", "ai", "saas"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Security & Auth
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Database
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.12.1",
    "pgvector>=0.2.4",
    
    # Data & ML
    "pydantic>=2.5.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
    "onnxruntime>=1.16.0",
    
    # Observability
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-exporter-otlp>=1.21.0",
    
    # External Integrations
    "httpx>=0.25.0",
    "stripe>=7.8.0",
    "twilio>=8.10.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "structlog>=23.2.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "faker>=20.1.0",
    "hypothesis>=6.88.0",
    
    # Code Quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "semgrep>=1.45.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.7",
    
    # Development
    "watchdog>=3.0.0",
    "pre-commit>=3.5.0",
]

security = [
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
]

[project.urls]
Homepage = "https://fundcast.ai"
Documentation = "https://docs.fundcast.ai"
Repository = "https://github.com/fundcast/platform"
"Bug Tracker" = "https://github.com/fundcast/platform/issues"

[tool.hatch.version]
path = "src/api/__init__.py"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S104",  # hardcoded bind all interfaces
    "S106",  # hardcoded password in tests
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S311"]  # assert, hardcoded secrets in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pgvector.*",
    "stripe.*",
    "twilio.*",
    "onnxruntime.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]