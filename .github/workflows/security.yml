name: 🛡️ Security & Compliance Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan on Mondays at 6 AM UTC
  workflow_dispatch:
    inputs:
      scan_intensity:
        description: 'Security Scan Intensity'
        required: true
        default: 'standard'
        type: choice
        options:
        - quick
        - standard
        - comprehensive

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================================================
  # SAST (Static Application Security Testing)
  # ============================================================================
  sast-scanning:
    name: 🔍 SAST Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔒 Bandit Security Linting
        run: |
          pip install bandit[toml]
          bandit -r src/ \
            -f json \
            -o bandit-report.json \
            -ll -i \
            --skip B101,B601  # Skip assert and shell injection for tests
          
          # Generate human-readable report
          bandit -r src/ -f txt -o bandit-report.txt || true
      
      - name: 🛡️ Safety Check - Known Vulnerabilities
        run: |
          pip install safety
          safety check \
            --json \
            --output safety-report.json \
            --continue-on-error
          
          # Generate readable report
          safety check --output text > safety-report.txt || true
      
      - name: 🔍 Semgrep Static Analysis
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/sql-injection
            p/xss
            p/command-injection
            p/fintech
          generateSarif: "1"
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      - name: 📊 Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
      
      - name: 🗝️ Secret Scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: 📋 Generate Security Summary
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Bandit Results
          if [ -f bandit-report.json ]; then
            HIGH_ISSUES=$(jq '.metrics._totals.SEVERITY.HIGH // 0' bandit-report.json)
            MEDIUM_ISSUES=$(jq '.metrics._totals.SEVERITY.MEDIUM // 0' bandit-report.json)
            LOW_ISSUES=$(jq '.metrics._totals.SEVERITY.LOW // 0' bandit-report.json)
            
            echo "### 🔒 Bandit Static Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **High Severity**: $HIGH_ISSUES issues" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium Severity**: $MEDIUM_ISSUES issues" >> $GITHUB_STEP_SUMMARY
            echo "- **Low Severity**: $LOW_ISSUES issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Safety Results
          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq 'length' safety-report.json)
            echo "### 🛡️ Vulnerability Scanning (Safety)" >> $GITHUB_STEP_SUMMARY
            echo "- **Known Vulnerabilities**: $VULN_COUNT found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### ✅ Security Status" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed. Check individual reports for details." >> $GITHUB_STEP_SUMMARY
      
      - name: 📁 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.txt
            safety-report.json
            safety-report.txt
          retention-days: 30

  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          pip install -e .
          pip install pip-audit cyclonedx-bom
      
      - name: 🔍 Pip-Audit Vulnerability Scan
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclone --output=sbom.json || true
      
      - name: 📊 Generate SBOM (Software Bill of Materials)
        run: |
          cyclonedx-py --format json --output sbom-detailed.json
      
      - name: 🚨 Check for Critical Vulnerabilities
        run: |
          python << 'EOF'
          import json
          import sys
          
          try:
              with open('pip-audit-report.json', 'r') as f:
                  data = json.load(f)
              
              critical_count = 0
              high_count = 0
              
              for vuln in data.get('vulnerabilities', []):
                  aliases = vuln.get('aliases', [])
                  for alias in aliases:
                      if 'CRITICAL' in str(alias):
                          critical_count += 1
                      elif 'HIGH' in str(alias):
                          high_count += 1
              
              print(f"Critical vulnerabilities: {critical_count}")
              print(f"High severity vulnerabilities: {high_count}")
              
              # Fail if critical vulnerabilities found
              if critical_count > 0:
                  print("❌ Critical vulnerabilities found! Review required.")
                  sys.exit(1)
              elif high_count > 5:  # Allow some high severity but flag if too many
                  print("⚠️ Many high severity vulnerabilities found. Review recommended.")
                  sys.exit(1)
              else:
                  print("✅ No critical vulnerabilities found.")
          
          except FileNotFoundError:
              print("No vulnerability report found.")
          except Exception as e:
              print(f"Error processing vulnerability report: {e}")
          EOF
      
      - name: 📁 Upload Dependency Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            pip-audit-report.json
            sbom.json
            sbom-detailed.json
          retention-days: 90

  # ============================================================================
  # COMPLIANCE & REGULATORY CHECKS
  # ============================================================================
  compliance-scan:
    name: ⚖️ Compliance & Regulatory Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: ⚖️ GDPR Compliance Check
        run: |
          python << 'EOF'
          import re
          import os
          from pathlib import Path
          
          def scan_for_pii_patterns():
              """Scan for potential PII patterns in code"""
              
              pii_patterns = {
                  'SSN': r'\b\d{3}-\d{2}-\d{4}\b',
                  'Credit Card': r'\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b',
                  'Email (hardcoded)': r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
                  'Phone': r'\b\d{3}[-.]?\d{3}[-.]?\d{4}\b',
                  'API Keys': r'["\'](?:api[_-]?key|secret[_-]?key|access[_-]?token)["\']:\s*["\'][^"\']{10,}["\']',
              }
              
              violations = []
              
              for py_file in Path('src').rglob('*.py'):
                  try:
                      with open(py_file, 'r', encoding='utf-8') as f:
                          content = f.read()
                      
                      for pattern_name, pattern in pii_patterns.items():
                          matches = re.finditer(pattern, content, re.IGNORECASE)
                          for match in matches:
                              line_num = content[:match.start()].count('\n') + 1
                              violations.append({
                                  'file': str(py_file),
                                  'line': line_num,
                                  'type': pattern_name,
                                  'match': match.group()[:50] + '...' if len(match.group()) > 50 else match.group()
                              })
                  
                  except Exception as e:
                      print(f"Error scanning {py_file}: {e}")
              
              return violations
          
          violations = scan_for_pii_patterns()
          
          with open('compliance_report.md', 'w') as f:
              f.write("## ⚖️ Compliance Scan Report\n\n")
              
              if violations:
                  f.write(f"⚠️ **{len(violations)} Potential PII/Compliance Issues Found:**\n\n")
                  for v in violations:
                      f.write(f"- **{v['type']}** in `{v['file']}:{v['line']}` - `{v['match']}`\n")
                  f.write("\n### Recommendations:\n")
                  f.write("- Review and remove hardcoded sensitive data\n")
                  f.write("- Use environment variables for API keys\n")
                  f.write("- Implement proper PII sanitization\n")
              else:
                  f.write("✅ **No obvious compliance violations found.**\n\n")
                  f.write("- No hardcoded PII patterns detected\n")
                  f.write("- No exposed API keys found\n")
                  f.write("- Codebase appears compliant with basic privacy regulations\n")
          
          print(f"Compliance scan completed. Found {len(violations)} potential issues.")
          EOF
      
      - name: 🏦 Financial Compliance Check
        run: |
          python << 'EOF'
          import re
          from pathlib import Path
          
          def check_fintech_compliance():
              """Check for financial services compliance requirements"""
              
              compliance_checks = {
                  'KYC Implementation': False,
                  'AML Controls': False,
                  'Data Encryption': False,
                  'Audit Logging': False,
                  'Access Controls': False,
                  'PCI DSS Readiness': False
              }
              
              # Scan for compliance indicators
              for py_file in Path('src').rglob('*.py'):
                  try:
                      with open(py_file, 'r') as f:
                          content = f.read().lower()
                      
                      if any(term in content for term in ['kyc', 'know your customer', 'identity verification']):
                          compliance_checks['KYC Implementation'] = True
                      
                      if any(term in content for term in ['aml', 'anti money laundering', 'suspicious activity']):
                          compliance_checks['AML Controls'] = True
                      
                      if any(term in content for term in ['encrypt', 'aes', 'rsa', 'fernet']):
                          compliance_checks['Data Encryption'] = True
                      
                      if any(term in content for term in ['audit', 'log', 'tracking']):
                          compliance_checks['Audit Logging'] = True
                      
                      if any(term in content for term in ['rbac', 'permission', 'role', 'access']):
                          compliance_checks['Access Controls'] = True
                      
                      if any(term in content for term in ['pci', 'payment card', 'card data']):
                          compliance_checks['PCI DSS Readiness'] = True
                  
                  except Exception:
                      continue
              
              return compliance_checks
          
          checks = check_fintech_compliance()
          
          with open('fintech_compliance_report.md', 'w') as f:
              f.write("## 🏦 FinTech Compliance Assessment\n\n")
              
              passed = sum(checks.values())
              total = len(checks)
              
              f.write(f"**Compliance Score: {passed}/{total} ({passed/total*100:.1f}%)**\n\n")
              
              for check, status in checks.items():
                  status_icon = "✅" if status else "❌"
                  f.write(f"{status_icon} **{check}**: {'Implemented' if status else 'Missing'}\n")
              
              f.write("\n### Regulatory Framework Status:\n")
              if checks['KYC Implementation'] and checks['AML Controls']:
                  f.write("✅ **BSA/AML Compliance**: Core components detected\n")
              else:
                  f.write("❌ **BSA/AML Compliance**: Missing KYC/AML implementations\n")
              
              if checks['Data Encryption'] and checks['Access Controls']:
                  f.write("✅ **Data Protection**: Encryption and access controls in place\n")
              else:
                  f.write("❌ **Data Protection**: Missing encryption or access controls\n")
              
              if passed >= 4:
                  f.write("\n🎉 **Overall Status**: Good compliance foundation\n")
              else:
                  f.write("\n⚠️ **Overall Status**: Compliance improvements needed\n")
          
          print(f"FinTech compliance check completed. Score: {passed}/{total}")
          EOF
      
      - name: 📊 Upload Compliance Reports
        run: |
          cat compliance_report.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat fintech_compliance_report.md >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # CONTAINER & INFRASTRUCTURE SECURITY
  # ============================================================================
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event.inputs.scan_intensity == 'comprehensive'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fundcast-security-scan:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/fundcast-image.tar
      
      - name: 🔍 Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/fundcast-image.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 🔍 Trivy Config Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          format: 'sarif'
          output: 'trivy-config.sarif'
      
      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-results.sarif
            trivy-config.sarif
      
      - name: 🛡️ Docker Security Best Practices Check
        run: |
          python << 'EOF'
          import re
          from pathlib import Path
          
          def check_dockerfile_security():
              """Check Dockerfile for security best practices"""
              
              if not Path('Dockerfile').exists():
                  print("No Dockerfile found - creating security recommendations")
                  return []
              
              with open('Dockerfile', 'r') as f:
                  content = f.read()
              
              issues = []
              
              # Security checks
              if 'USER root' in content or not re.search(r'USER \w+', content):
                  issues.append("❌ Container runs as root - should use non-root user")
              
              if 'COPY . .' in content:
                  issues.append("⚠️ Copying entire context - use .dockerignore")
              
              if re.search(r'RUN.*apt-get.*&&.*rm.*', content) is None and 'apt-get' in content:
                  issues.append("⚠️ Package cache not cleaned - increases image size")
              
              if 'ADD http' in content:
                  issues.append("❌ Using ADD for URLs - use COPY or RUN curl instead")
              
              if '--no-cache-dir' not in content and 'pip install' in content:
                  issues.append("ℹ️ Consider using --no-cache-dir for pip installs")
              
              return issues
          
          issues = check_dockerfile_security()
          
          with open('docker_security_report.md', 'w') as f:
              f.write("## 🐳 Docker Security Analysis\n\n")
              
              if issues:
                  f.write(f"Found {len(issues)} security recommendations:\n\n")
                  for issue in issues:
                      f.write(f"{issue}\n")
              else:
                  f.write("✅ No major security issues found in Dockerfile\n")
              
              f.write("\n### Best Practices:\n")
              f.write("- Use multi-stage builds to reduce image size\n")
              f.write("- Run as non-root user\n")
              f.write("- Use specific base image tags (not 'latest')\n")
              f.write("- Minimize layers and clean package caches\n")
              f.write("- Use .dockerignore to exclude sensitive files\n")
          
          print(f"Docker security check completed. Found {len(issues)} recommendations.")
          EOF

  # ============================================================================
  # SECURITY SUMMARY & REPORTING
  # ============================================================================
  security-summary:
    name: 📋 Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-scanning, dependency-scan, compliance-scan, container-security]
    if: always()
    
    steps:
      - name: 📊 Generate Security Dashboard
        run: |
          echo "## 🛡️ Security & Compliance Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status indicators
          if [[ "${{ needs.sast-scanning.result }}" == "success" ]]; then
            echo "✅ **SAST Scanning**: No critical issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **SAST Scanning**: Issues found - review required" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ **Dependency Scan**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Scan**: Critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.compliance-scan.result }}" == "success" ]]; then
            echo "✅ **Compliance Check**: Regulatory requirements met" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Compliance Check**: Compliance improvements needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.container-security.result }}" == "success" ]]; then
            echo "✅ **Container Security**: Docker security validated" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.container-security.result }}" == "skipped" ]]; then
            echo "⏭️ **Container Security**: Skipped (not required for this run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Container Security**: Container vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Security Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **OWASP ASVS Level**: 2 (Application Security)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Standards**: OWASP Top 10, API Security" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance**: GDPR, SOX, PCI DSS Ready" >> $GITHUB_STEP_SUMMARY
          echo "- **Encryption**: AES-256, TLS 1.3" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review detailed security reports in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any critical or high-severity findings" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "4. Implement additional security controls as needed" >> $GITHUB_STEP_SUMMARY
      
      - name: 🚨 Security Alert on Critical Issues
        if: needs.dependency-scan.result == 'failure'
        run: |
          echo "🚨 CRITICAL SECURITY ALERT: Critical vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          echo "Immediate action required - do not deploy until resolved." >> $GITHUB_STEP_SUMMARY