name: 🚀 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # ============================================================================
  # CODE QUALITY & LINTING
  # ============================================================================
  quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort bandit safety
          pip install -r requirements-dev.txt || pip install -e .
      
      - name: 🎯 Ruff Linting
        run: ruff check . --output-format=github
      
      - name: 🎨 Black Formatting Check
        run: black --check --diff .
      
      - name: 📚 Import Sorting (isort)
        run: isort --check-only --diff .
      
      - name: 🔬 Type Checking (MyPy)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true
      
      - name: 📊 Code Complexity Analysis
        run: |
          pip install radon xenon
          radon cc --show-complexity src/
          xenon --max-absolute B --max-modules A --max-average A src/
        continue-on-error: true

  # ============================================================================
  # COMPREHENSIVE TESTING MATRIX
  # ============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']
        exclude:
          - os: windows-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.11'
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fundcast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-benchmark
          pip install httpx fastapi[all] sqlalchemy[asyncio] alembic
          pip install -e .
      
      - name: 🗄️ Setup Database
        run: |
          python -c "
          import asyncio
          import asyncpg
          async def setup():
              conn = await asyncpg.connect('postgresql://postgres:postgres@localhost:5432/postgres')
              await conn.execute('CREATE EXTENSION IF NOT EXISTS vector')
              await conn.close()
          asyncio.run(setup())
          "
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fundcast_test
      
      - name: 🧪 Run Tests with Coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            -v
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fundcast_test
          REDIS_URL: redis://localhost:6379
      
      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
      
      - name: 📈 Store Benchmark Results
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: |
          echo "Performance Benchmarks:" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('benchmark.json') as f:
              data = json.load(f)
              for benchmark in data['benchmarks']:
                  print(f'- {benchmark[\"name\"]}: {benchmark[\"stats\"][\"mean\"]:.4f}s ± {benchmark[\"stats\"][\"stddev\"]:.4f}s')
          " >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # AI-POWERED SECURITY ANALYSIS
  # ============================================================================
  ai-security:
    name: 🤖 AI Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔒 Security Scanning (Bandit)
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: 🛡️ Safety Check (Known Vulnerabilities)
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: 🔍 Semgrep Analysis
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/sql-injection
            p/xss
          generateSarif: "1"
      
      - name: 📊 Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
      
      - name: 🤖 AI Code Review (GPT-4)
        if: github.event_name == 'pull_request'
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          model: gpt-4
          review_simple_changes: false
          review_comment_lgtm: false

  # ============================================================================
  # DOCKER BUILD & SECURITY
  # ============================================================================
  docker:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fundcast:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/fundcast.tar
      
      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/fundcast.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # API INTEGRATION TESTING
  # ============================================================================
  integration:
    name: 🔗 API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test]
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fundcast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          pip install -e .
          pip install pytest httpx pytest-asyncio
      
      - name: 🚀 Start FastAPI Server
        run: |
          cd src && python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fundcast_test
          REDIS_URL: redis://localhost:6379
      
      - name: 🧪 Run Integration Tests
        run: |
          pytest tests/test_integration.py -v \
            --endpoint=http://localhost:8000 \
            --timeout=30
      
      - name: 📊 API Health Check
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/v1/health || exit 1

  # ============================================================================
  # PERFORMANCE BENCHMARKS
  # ============================================================================
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          pip install -e .
          pip install pytest-benchmark locust
      
      - name: ⚡ Run Performance Tests
        run: |
          pytest tests/test_performance.py --benchmark-json=perf.json
      
      - name: 📊 Store Performance Results
        run: |
          echo "## Performance Benchmarks 🏁" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          try:
              with open('perf.json') as f:
                  data = json.load(f)
                  for benchmark in data['benchmarks']:
                      name = benchmark['name']
                      mean = benchmark['stats']['mean']
                      stddev = benchmark['stats']['stddev']
                      print(f'- **{name}**: {mean:.4f}s ± {stddev:.4f}s')
          except FileNotFoundError:
              print('No performance data generated')
          " >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # DEPLOYMENT READINESS CHECK
  # ============================================================================
  deploy-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test, ai-security, docker, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: ✅ Deployment Readiness Summary
        run: |
          echo "## 🎯 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Test Suite**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for Deployment!**" >> $GITHUB_STEP_SUMMARY
      
      - name: 📧 Notify on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 FundCast CI Pipeline Completed Successfully! Ready for deployment.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}